var transform   = require('readable-stream/transform')
var parsefn = require('parse-function')

module.exports = {
  stringify: function o2j () {
    var stream$ = transform({ objectMode: true })
    stream$._transform = object2jsonish
    return stream$
  },
  parse: function o2j () {
    var stream$ = transform({ objectMode: true })
    stream$._transform = jsonish2object
    return stream$
  }
}


function object2jsonish (chunk, encoding, next) { // encode
  encoding = typeof chunk
  if (typeof chunk === 'object') {
    try { chunk = JSON.stringify(chunk) }
    catch (e) { next(e) }
  }
  else if (typeof chunk === 'function') chunk = ''+chunk
  next(null, JSON.stringify({ encoding, chunk }))
}


function jsonish2object (chunk, encoding, next) { // decode
  chunk = chunk.toString()
  try {
    chunk = JSON.parse(chunk)
    if (chunk.encoding === 'number') chunk = Number(chunk.chunk)
    else if (chunk.encoding === 'boolean') chunk = {'true':true,'false':false}[chunk.chunk]
    else if (chunk.encoding === 'string') chunk = chunk.chunk
    else if (chunk.encoding === 'object') chunk = JSON.parse(chunk.chunk)
    else if (chunk.encoding === 'function') {
      var fnobj = parsefn(chunk.chunk)
      if (!fnobj.isValid || fnobj.isGenerator) throw new Error(`no valid function`)
      var chunk = new Function(`
        return function ${fnobj.name} (${fnobj.params}) { ${fnobj.body} }
      `)()
    }
    else if (chunk.encoding === 'undefined') chunk = undefined
    else throw new Error(`invalid type ${chunk.encoding}`)
  }
  catch (e) { next(e) }
  next(null, chunk)
}
